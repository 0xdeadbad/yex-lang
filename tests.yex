def assert message condition =
	if !condition then
		raise :AssertionError message
	else
		nil


let ops_test = 
	let tests = [
		1 + 2 == 3,
		1 - 2 == -1,
		1 * 2 == 2,
		1 / 2 == 0.5,
		3 % 2 == 1,
		1 <<< 2 == 4,
		1 >>> 2 == 0,
		1 &&& 2 == 0,
		1 ||| 2 == 3,
		1 ^^^ 2 == 3,
		1 == 1,
		1 != 2,
		1 < 2,
		1 <= 1,
		3 > 2,
		3 >= 3,
		1 && 2,
		1 || 0,
	]
	in List.map (assert "Operator test failed") tests

type Person = p name age with
	def adult? p =
		match p with
		| (Person.p _ age) if age >= 18 -> true
		| _ -> false
end

let type_test =
	let p = Person.p "John" 18
	in (
		assert "Person is not adult" (Person.adult? p),
		assert "p is not a Person" (p is Person),
	)

let exception_test =
	try
		raise :AssertionError "should be rescued"
	rescue e
		assert "Should be an assertion error" (e == :AssertionError)

let list_test =
	assert
		"List tests failed"
		(
			[1, 2, 3]
			|> List.map (fn i = i * 2)
			|> List.map (fn i = i + 1)
			|> List.filter (fn i = i != 3)
			|> List.fold (fn acc x = acc + x) 0
			|> (fn x = x == 12)
		)

def tailcall counter _ =
	match counter with
	| _ if counter > 0 -> =>tailcall (counter - 1) nil
	| _ -> "Done"

assert "Tailcall test failed" (tailcall 10 nil == "Done")

def partial a b c d = a * b - c * d

let ops_tests =
	let tests = [
		partial 1 2 3 4 == -10,
		(partial 1) 2 3 4 == -10,
		(partial 1 2) 3 4 == -10,
		(partial 1 2 3) 4 == -10,
		((partial 1) 2 3) 4 == -10,
		(((partial 1) 2) 3) 4 == -10,
		((partial 1) 2 3) 4 == -10,
	]
	in List.map (assert "Partial function test failed") tests

let _ = println "Everything is alright!"
